---
import { readOne, readAll } from 'src/lib/markdoc/read';
import { blog } from 'src/lib/markdoc/frontmatter.schema';
import Renderer from 'src/components/Renderer.astro';
import BlogPostMeta from 'src/components/BlogPostMeta.astro';
import ContentLayout from 'src/layouts/ContentLayout.astro';
import { SITE_URL } from 'src/config';
import { languages } from 'src/i18n';

export async function getStaticPaths() {
  const langs = Object.keys(languages) as Array<keyof typeof languages>;

  const posts: Array<
    {
      lang: keyof typeof languages;
    } & Awaited<ReturnType<typeof readOne<typeof blog>>>
  > = [];

  for (const lang of langs) {
    const postsByLang = (
      await readAll({
        directory: `${lang}/articles`,
        frontmatterSchema: blog,
      })
    ).map((post) => ({ ...post, lang }));

    posts.push(...postsByLang);
  }

  // we don't want to generate pages for posts that link to external websites
  const filteredPosts = posts
    .filter((p) => p.frontmatter.draft !== true)
    .filter(({ frontmatter }) => !frontmatter.external);

  return filteredPosts.map((post) => {
    return { params: { slug: post.slug, lang: post.lang } };
  });
}

const { slug, lang } = Astro.params;
if (typeof slug !== 'string') {
  throw Error(`slug should be string. Received: ${slug}`);
}

const { content, frontmatter } = await readOne({
  directory: `${lang}/articles`,
  slug,
  frontmatterSchema: blog,
});

const ogImageAbsoluteUrl =
  frontmatter.external !== true && frontmatter.ogImagePath
    ? new URL(frontmatter.ogImagePath, SITE_URL).toString()
    : undefined;
---

<ContentLayout title={frontmatter.title} date={frontmatter.date} lang={lang}>
  <BlogPostMeta
    title={frontmatter.title}
    description={frontmatter.external ? undefined : frontmatter.description}
    publishDate={frontmatter.date.toISOString()}
    pagePath={`/${lang}/articles/${slug}`}
    ogImageAbsoluteUrl={ogImageAbsoluteUrl}
    slot="meta"
  />
  <Renderer content={content} slot="content" />
</ContentLayout>
